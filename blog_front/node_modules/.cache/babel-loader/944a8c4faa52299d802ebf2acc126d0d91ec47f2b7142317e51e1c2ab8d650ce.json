{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shind\\\\OneDrive\\\\Desktop\\\\coding project\\\\blog post\\\\blog_front\\\\src\\\\Components\\\\CommentsSection.js\",\n  _s = $RefreshSig$();\nimport Comment from './Comment.js';\nimport { React, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CommentsSection(props) {\n  _s();\n  const NewCommentRef = useRef();\n  function AddComment(event) {\n    event.preventDefault(); //prevent form from refreshing upon submit\n\n    const NewComment = NewCommentRef.current.value; //get New comment from the form\n\n    //POST request to /addcomment with information on the new comment in its body to be added into DB\n    fetch('http://localhost:3001/addcomment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        PostID: props.PostID,\n        NewComment: NewComment,\n        Username: props.CurrUser\n      })\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [props.CurrUser ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: AddComment,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        required: true,\n        ref: NewCommentRef,\n        rows: \"4\",\n        cols: \"50\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Comment!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 90\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Comments Section: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), props.Comments[0] ? props.Comments.map(CommentData => {\n      //iterates through the Comments prop, getting the CommentData of every comment consisting of its comment and commentor displayname\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(Comment, {\n          DisplayName: CommentData.displayname,\n          Comment: CommentData.comment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 58\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 138\n        }, this), \" \"]\n      }, CommentData.commentid, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 24\n      }, this); //renders a Comment component for each CommentData\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" sorry, but there are no comments \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 18\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n_s(CommentsSection, \"F8f2eFkNEaAnYP2hFYc+cvE54Ek=\");\n_c = CommentsSection;\nexport default CommentsSection;\nvar _c;\n$RefreshReg$(_c, \"CommentsSection\");","map":{"version":3,"names":["Comment","React","useRef","CommentsSection","props","NewCommentRef","AddComment","event","preventDefault","NewComment","current","value","fetch","method","headers","body","JSON","stringify","PostID","Username","CurrUser","Comments","map","CommentData","displayname","comment","commentid"],"sources":["C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/src/Components/CommentsSection.js"],"sourcesContent":["import Comment from './Comment.js';\r\nimport { React, useRef } from 'react';\r\n\r\nfunction CommentsSection(props) {\r\n    const NewCommentRef = useRef();\r\n\r\n    function AddComment(event) {\r\n        event.preventDefault(); //prevent form from refreshing upon submit\r\n\r\n        const NewComment = NewCommentRef.current.value; //get New comment from the form\r\n\r\n        //POST request to /addcomment with information on the new comment in its body to be added into DB\r\n        fetch('http://localhost:3001/addcomment', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({PostID: props.PostID, NewComment: NewComment, Username: props.CurrUser})\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            {/* Form to add a new Comment is only shown if user is logged in */}\r\n            {props.CurrUser ?\r\n                <form onSubmit={AddComment}>\r\n                    <textarea required ref={NewCommentRef} rows='4' cols='50'></textarea><input type='submit' value='Comment!' />\r\n                </form> : null\r\n            }\r\n\r\n            {/* The rest of the comments section */}\r\n            <h1>Comments Section: </h1>\r\n            {(props.Comments[0] ? props.Comments.map(CommentData => { //iterates through the Comments prop, getting the CommentData of every comment consisting of its comment and commentor displayname\r\n                return <div key={CommentData.commentid}> <Comment DisplayName={CommentData.displayname} Comment={CommentData.comment} /> <br /> </div> //renders a Comment component for each CommentData\r\n            }) : <div> sorry, but there are no comments </div>)} {/* if the Comments prop does have at least 1 entry, display a sorry, no comments message */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommentsSection;"],"mappings":";;AAAA,OAAOA,OAAO,MAAM,cAAc;AAClC,SAASC,KAAK,EAAEC,MAAM,QAAQ,OAAO;AAAC;AAEtC,SAASC,eAAe,CAACC,KAAK,EAAE;EAAA;EAC5B,MAAMC,aAAa,GAAGH,MAAM,EAAE;EAE9B,SAASI,UAAU,CAACC,KAAK,EAAE;IACvBA,KAAK,CAACC,cAAc,EAAE,CAAC,CAAC;;IAExB,MAAMC,UAAU,GAAGJ,aAAa,CAACK,OAAO,CAACC,KAAK,CAAC,CAAC;;IAEhD;IACAC,KAAK,CAAC,kCAAkC,EAAE;MACtCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACC,MAAM,EAAEd,KAAK,CAACc,MAAM;QAAET,UAAU,EAAEA,UAAU;QAAEU,QAAQ,EAAEf,KAAK,CAACgB;MAAQ,CAAC;IACjG,CAAC,CAAC;EACN;EACA,oBACI;IAAA,WAEKhB,KAAK,CAACgB,QAAQ,gBACX;MAAM,QAAQ,EAAEd,UAAW;MAAA,wBACvB;QAAU,QAAQ;QAAC,GAAG,EAAED,aAAc;QAAC,IAAI,EAAC,GAAG;QAAC,IAAI,EAAC;MAAI;QAAA;QAAA;QAAA;MAAA,QAAY;QAAO,IAAI,EAAC,QAAQ;QAAC,KAAK,EAAC;MAAU;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAC1G,GAAG,IAAI,eAIlB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA2B,EACzBD,KAAK,CAACiB,QAAQ,CAAC,CAAC,CAAC,GAAGjB,KAAK,CAACiB,QAAQ,CAACC,GAAG,CAACC,WAAW,IAAI;MAAE;MACtD,oBAAO;QAAA,6BAAkC,QAAC,OAAO;UAAC,WAAW,EAAEA,WAAW,CAACC,WAAY;UAAC,OAAO,EAAED,WAAW,CAACE;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG,oBAAC;UAAA;UAAA;UAAA;QAAA,QAAM;MAAA,GAA9GF,WAAW,CAACG,SAAS;QAAA;QAAA;QAAA;MAAA,QAAgG,EAAC;IAC3I,CAAC,CAAC,gBAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA6C;EAAA;IAAA;IAAA;IAAA;EAAA,QAChD;AAEd;AAAC,GA/BQvB,eAAe;AAAA,KAAfA,eAAe;AAiCxB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}