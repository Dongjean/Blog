{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shind\\\\OneDrive\\\\Desktop\\\\coding project\\\\blog post\\\\blog_front\\\\src\\\\Pages\\\\OpenBlog.js\",\n  _s = $RefreshSig$();\nimport { useLocation } from 'react-router-dom';\nimport { useState } from 'react';\nimport CommentsSection from '../Components/CommentsSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OpenBlog(props) {\n  _s();\n  const Data = useLocation().state; //get data about Post from App.js\n  const isViewerAuthor = Data.CurrUser == Data.Username; //isViewerAuthor is true if Data.CurrUser = Data.Username, AKA the viewer is the author of the post\n  const [isCommentsOpen, setCommentsOpenState] = useState(false); //comments are not open from the beginning by default\n  const [Comments, setCommentsState] = useState(null);\n\n  //function called to delete the post\n  async function DeletePost() {\n    const PostID = Data.PostID;\n\n    //send a POST request to /deleteblog with PostID in its body\n    await fetch('http://localhost:3001/deleteblog', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        PostID: PostID\n      })\n    });\n    props.Login(Data.Username, Data.DisplayName); //go back to the HomePage still logged in as the user\n  }\n\n  function getComments() {\n    const PostID = Data.PostID;\n\n    //send a GET request to /getcomments with PostID as a parameter\n    fetch('http://localhost:3001/getcomments/' + PostID).then(res => res.json()).then(response => {\n      const Comments = response.res;\n      setCommentsOpenState(true); //set the isCommentsOpen State to true to show comments\n      setCommentsState(Comments); //update the information stored in the Comments State\n    });\n  }\n\n  function closeComments() {\n    setCommentsOpenState(false); //set the isCommentsOpen State to false to hide comments\n  }\n\n  function Like() {\n    console.log('liked!');\n  }\n  function UnLike() {}\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Title: \", Data.Title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 42\n    }, this), \"Author: \", Data.DisplayName, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 40\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 46\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `data:image/jpeg;base64,${Data.Image}`,\n      alt: Data.ImageName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 87\n    }, this), \" \", Data.PostText, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 29\n    }, this), \"Likes: \", LikesCount, /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: Like,\n      children: \"Like\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: UnLike,\n      children: \"Unlike\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 47\n    }, this), isViewerAuthor ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: DeletePost,\n      children: \"Delete Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 31\n    }, this) : null, \" \", isCommentsOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CommentsSection, {\n        Comments: Comments,\n        PostID: Data.PostID,\n        CurrUser: Data.CurrUser,\n        getComments: getComments\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: closeComments,\n        children: \"Close Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getComments,\n      children: \"See Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(OpenBlog, \"lYN1CZu66JTy6TeREHNLrAQHAIY=\", false, function () {\n  return [useLocation];\n});\n_c = OpenBlog;\nexport default OpenBlog;\nvar _c;\n$RefreshReg$(_c, \"OpenBlog\");","map":{"version":3,"names":["useLocation","useState","CommentsSection","OpenBlog","props","Data","state","isViewerAuthor","CurrUser","Username","isCommentsOpen","setCommentsOpenState","Comments","setCommentsState","DeletePost","PostID","fetch","method","headers","body","JSON","stringify","Login","DisplayName","getComments","then","res","json","response","closeComments","Like","console","log","UnLike","Title","Image","ImageName","PostText","LikesCount"],"sources":["C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/src/Pages/OpenBlog.js"],"sourcesContent":["import {useLocation} from 'react-router-dom';\r\nimport {useState} from 'react';\r\nimport CommentsSection from '../Components/CommentsSection';\r\n\r\nfunction OpenBlog(props) {\r\n    const Data = useLocation().state; //get data about Post from App.js\r\n    const isViewerAuthor = (Data.CurrUser == Data.Username); //isViewerAuthor is true if Data.CurrUser = Data.Username, AKA the viewer is the author of the post\r\n    const [isCommentsOpen, setCommentsOpenState] = useState(false); //comments are not open from the beginning by default\r\n    const [Comments, setCommentsState] = useState(null);\r\n\r\n    //function called to delete the post\r\n    async function DeletePost() {\r\n        const PostID = Data.PostID\r\n\r\n        //send a POST request to /deleteblog with PostID in its body\r\n        await fetch('http://localhost:3001/deleteblog', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({PostID: PostID})\r\n        })\r\n        \r\n        props.Login(Data.Username, Data.DisplayName); //go back to the HomePage still logged in as the user\r\n    }\r\n\r\n    function getComments() {\r\n        const PostID = Data.PostID\r\n\r\n        //send a GET request to /getcomments with PostID as a parameter\r\n        fetch('http://localhost:3001/getcomments/' + PostID).then(\r\n            res => res.json()\r\n        ).then(\r\n            response => {\r\n                const Comments = response.res\r\n                setCommentsOpenState(true) //set the isCommentsOpen State to true to show comments\r\n                setCommentsState(Comments) //update the information stored in the Comments State\r\n            }\r\n        )\r\n    }\r\n\r\n    function closeComments() {\r\n        setCommentsOpenState(false) //set the isCommentsOpen State to false to hide comments\r\n    }\r\n\r\n    function Like() {\r\n        console.log('liked!')\r\n    }\r\n\r\n    function UnLike() {\r\n\r\n    }\r\n\r\n    return (\r\n        <div> {/* diplaying the blog post itself first */}\r\n            <h1>Title: {Data.Title}</h1> <br />\r\n            Author: {Data.DisplayName} <br /><br />\r\n            <img src={`data:image/jpeg;base64,${Data.Image}`} alt={Data.ImageName} /> <br /> {/* Display the image base64 image data as an image */}\r\n            {Data.PostText} <br />\r\n\r\n            {/* Displaying Post Likes Displayers and Mutator buttons */}\r\n            Likes: {LikesCount} \r\n            <div onClick={Like}>Like</div>\r\n            <div onClick={UnLike}>Unlike</div><br />\r\n\r\n            {isViewerAuthor ? <button onClick={DeletePost}>Delete Post</button> : null} {/* Only Displays if isViewerAuthor is true-if the viewer of the post is the author themselves, otherwise displays null. This button deletes the post */}\r\n\r\n            {/* Displays Button to open the Comments section if not already open, and a Button to close it if it already is open */}\r\n            {isCommentsOpen ? \r\n            <div>\r\n                <CommentsSection Comments={Comments} PostID={Data.PostID} CurrUser={Data.CurrUser} getComments={getComments} /> {/* Display the comments section */}\r\n                <button onClick={closeComments}>Close Comments</button> {/* Display the close button */}\r\n            </div> :\r\n            <button onClick={getComments}>See Comments</button>} {/* Display the open button */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpenBlog;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}