{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shind\\\\OneDrive\\\\Desktop\\\\coding project\\\\blog post\\\\blog_front\\\\src\\\\Pages\\\\UpdatePost.js\",\n  _s = $RefreshSig$();\nimport { React, useRef, useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport UpdateCategory from '../Components/UpdateCategory.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UpdatePost() {\n  _s();\n  const OGPost = useLocation().state;\n  const TitleRef = useRef();\n  const ImageRef = useRef();\n  const PostTextRef = useRef();\n  const SelectedCatsRef = useRef();\n  const UnselectedCatsRef = useRef();\n  const OGCats = OGPost.Cats.filter(Cat => Cat.categoryid !== 0);\n  const [UnselectedCats, setUnselectedCats] = useState();\n  const [SelectedCats, setSelectedCats] = useState();\n  SelectedCatsRef.current = OGCats;\n\n  //runs only on mount\n  useEffect(() => {\n    GetAllCats();\n  }, []);\n  function addpost(event) {\n    event.preventDefault(); //prevent form from refreshing upon submit\n\n    //get form data\n    const Title = TitleRef.current.value;\n    const Image = ImageRef.current.files[0];\n    const PostText = PostTextRef.current.value;\n    const Author = OGPost.Username;\n\n    //append form data in FormData object, FD\n    const FD = new FormData();\n    FD.append('Image', Image);\n    FD.append('Title', Title);\n    FD.append('PostText', PostText);\n    FD.append('AuthorUsername', Author);\n    FD.append('Categories', SelectedCatsRef.current);\n\n    //send a POST request to backend to post the blog with data FD\n    fetch('http://localhost:3001/updateblog', {\n      method: 'POST',\n      body: FD\n    });\n  }\n  function GetAllCats() {\n    fetch('http://localhost:3001/getallcats').then(\n    //fetches all the categories from backend\n    res => {\n      return res.json();\n    }).then(response => {\n      const temp = response.res.filter(Cat => Cat.categoryid !== 0); //response.res is an array of Categories, and set temp to be all categories except All with CategoryID 0\n      const tempOGCatIDs = OGCats.map(Cat => Cat.categoryid); //gets a temporary array of all of the originally selected categoryIDs\n      const PostCats = temp.filter(Cat => !tempOGCatIDs.includes(Cat.categoryid)); //creates a new array storing all the initially unselected categories\n\n      UnselectedCats.current = PostCats;\n      setUnselectedCats(PostCats); //sets the Categories state to the response\n    });\n  }\n\n  function AddCat(CatID, CatName) {\n    SelectedCatsRef.current.push({\n      categoryid: CatID,\n      category: CatName\n    });\n    console.log(SelectedCatsRef.current);\n    setUnselectedCats(UnselectedCats.filter(UnselectedCat => UnselectedCat.categoryid !== CatID));\n  }\n  function RemoveCat(CatID, CatName) {\n    SelectedCatsRef.current = SelectedCatsRef.current.filter(NPostCat => NPostCat.categoryid !== CatID);\n    console.log(SelectedCatsRef.current);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Update your Blog! \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addpost,\n      children: [\" \", \"Post Title: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        required: true,\n        ref: TitleRef,\n        value: OGPost.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 95\n      }, this), NPostCats.current[0] ? NPostCats.current.map(Cat => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(UpdateCategory, {\n            AddCat: AddCat,\n            RemoveCat: RemoveCat,\n            Cat: Cat,\n            Checked: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this);\n      }) : null, UnselectedCats ? UnselectedCats.map(Cat => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(UpdateCategory, {\n            AddCat: AddCat,\n            RemoveCat: RemoveCat,\n            Cat: Cat,\n            Checked: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this);\n      }) : null, /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `data:image/jpeg;base64,${OGPost.Image}`,\n        alt: OGPost.ImageName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 95\n      }, this), \" \", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 158\n      }, this), \"New Image: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        required: true,\n        ref: ImageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 28\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 74\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        required: true,\n        ref: PostTextRef,\n        rows: \"4\",\n        cols: \"50\",\n        value: OGPost.PostText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 109\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(UpdatePost, \"CoLWnOcJzVtp8Dk/tx8J4erwnvI=\", false, function () {\n  return [useLocation];\n});\n_c = UpdatePost;\nexport default UpdatePost;\nvar _c;\n$RefreshReg$(_c, \"UpdatePost\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useLocation","UpdateCategory","UpdatePost","OGPost","state","TitleRef","ImageRef","PostTextRef","SelectedCatsRef","UnselectedCatsRef","OGCats","Cats","filter","Cat","categoryid","UnselectedCats","setUnselectedCats","SelectedCats","setSelectedCats","current","GetAllCats","addpost","event","preventDefault","Title","value","Image","files","PostText","Author","Username","FD","FormData","append","fetch","method","body","then","res","json","response","temp","tempOGCatIDs","map","PostCats","includes","AddCat","CatID","CatName","push","category","console","log","UnselectedCat","RemoveCat","NPostCat","NPostCats","ImageName"],"sources":["C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/src/Pages/UpdatePost.js"],"sourcesContent":["import { React, useRef, useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport UpdateCategory from '../Components/UpdateCategory.js';\r\n\r\nfunction UpdatePost() {\r\n    const OGPost = useLocation().state;\r\n    const TitleRef = useRef();\r\n    const ImageRef = useRef();\r\n    const PostTextRef = useRef();\r\n    const SelectedCatsRef = useRef();\r\n    const UnselectedCatsRef = useRef();\r\n    const OGCats = OGPost.Cats.filter(Cat => Cat.categoryid !== 0);\r\n    const [UnselectedCats, setUnselectedCats] = useState();\r\n    const [SelectedCats, setSelectedCats] = useState();\r\n    \r\n    SelectedCatsRef.current = OGCats\r\n\r\n    //runs only on mount\r\n    useEffect(() => {\r\n        GetAllCats()\r\n    }, [])\r\n\r\n    function addpost (event) {\r\n        event.preventDefault(); //prevent form from refreshing upon submit\r\n\r\n        //get form data\r\n        const Title = TitleRef.current.value;\r\n        const Image = ImageRef.current.files[0];\r\n        const PostText = PostTextRef.current.value;\r\n        const Author = OGPost.Username;\r\n\r\n        //append form data in FormData object, FD\r\n        const FD = new FormData();\r\n        FD.append('Image', Image);\r\n        FD.append('Title', Title);\r\n        FD.append('PostText', PostText);\r\n        FD.append('AuthorUsername', Author);\r\n        FD.append('Categories', SelectedCatsRef.current);\r\n\r\n        //send a POST request to backend to post the blog with data FD\r\n        fetch('http://localhost:3001/updateblog', {\r\n            method: 'POST',\r\n            body: FD\r\n        })\r\n    }\r\n\r\n    function GetAllCats() {\r\n\r\n        fetch('http://localhost:3001/getallcats').then( //fetches all the categories from backend\r\n            res => {\r\n                return res.json()\r\n            }\r\n        ).then(\r\n            response => {\r\n                const temp = response.res.filter(Cat => Cat.categoryid !== 0) //response.res is an array of Categories, and set temp to be all categories except All with CategoryID 0\r\n                const tempOGCatIDs = OGCats.map(Cat => Cat.categoryid) //gets a temporary array of all of the originally selected categoryIDs\r\n                const PostCats = temp.filter(Cat => !tempOGCatIDs.includes(Cat.categoryid)) //creates a new array storing all the initially unselected categories\r\n\r\n                UnselectedCats.current = PostCats\r\n                setUnselectedCats(PostCats) //sets the Categories state to the response\r\n            }\r\n        )\r\n    }\r\n\r\n    function AddCat(CatID, CatName) {\r\n        SelectedCatsRef.current.push({categoryid: CatID, category: CatName})\r\n        console.log(SelectedCatsRef.current)\r\n        setUnselectedCats(UnselectedCats.filter(UnselectedCat => UnselectedCat.categoryid !== CatID))\r\n    }\r\n\r\n    function RemoveCat(CatID, CatName) {\r\n        SelectedCatsRef.current = SelectedCatsRef.current.filter(NPostCat => NPostCat.categoryid !== CatID)\r\n        console.log(SelectedCatsRef.current)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            Update your Blog! <br />\r\n            <form onSubmit={addpost}> {/* form calls onSubmit() method on submittion of form */}\r\n                Post Title: <input type='text' required ref={TitleRef} value={OGPost.Title}/> <br />\r\n                {/* Displays the categories */}\r\n\r\n                {NPostCats.current[0] ? NPostCats.current.map(Cat => {\r\n                    return (\r\n                        <div>\r\n                            <UpdateCategory AddCat={AddCat} RemoveCat={RemoveCat} Cat={Cat} Checked={true} />\r\n                        </div>\r\n                    )\r\n                }) : null}\r\n                {UnselectedCats ? UnselectedCats.map(Cat => {\r\n                    return (\r\n                        <div>\r\n                            <UpdateCategory AddCat={AddCat} RemoveCat={RemoveCat} Cat={Cat} Checked={false} />\r\n                        </div>\r\n                    )\r\n                }) : null}\r\n\r\n                <img src={`data:image/jpeg;base64,${OGPost.Image}`} alt={OGPost.ImageName} /> <br /> {/* Display the image base64 image data as an image */} <br />\r\n                New Image: <input type='file' required ref={ImageRef} /> <br />\r\n                <textarea required ref={PostTextRef} rows='4' cols='50' value={OGPost.PostText}></textarea> <br />\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdatePost;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}