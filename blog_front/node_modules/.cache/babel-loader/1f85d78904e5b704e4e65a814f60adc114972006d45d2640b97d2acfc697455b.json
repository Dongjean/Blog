{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";//Components imports\nimport Comment from'./Comment.js';import{React,useRef}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CommentsSection(props){var NewCommentRef=useRef();//function called to add a comment\nfunction AddComment(_x){return _AddComment.apply(this,arguments);}//function called to delete a comment, called by DeleteComment() in Comment.js\nfunction _AddComment(){_AddComment=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(event){var NewComment;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();//prevent form from refreshing upon submit\nNewComment=NewCommentRef.current.value;//get New comment from the form\n//POST request to /addcomment with information on the new comment in its body to be added into DB\n_context.next=4;return fetch('http://localhost:3001/addcomment',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({PostID:props.PostID,NewComment:NewComment,Username:props.CurrUser})});case 4:case\"end\":return _context.stop();}}},_callee);}));return _AddComment.apply(this,arguments);}function DeleteComment(_x2){return _DeleteComment.apply(this,arguments);}function _DeleteComment(){_DeleteComment=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(CommentID){return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch('http://localhost:3001/deletecomment',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({CommentID:CommentID})});case 2:props.getComments();//get the updated list of comments\ncase 3:case\"end\":return _context2.stop();}}},_callee2);}));return _DeleteComment.apply(this,arguments);}return/*#__PURE__*/_jsxs(\"div\",{children:[props.CurrUser?/*#__PURE__*/_jsxs(\"form\",{onSubmit:AddComment,children:[/*#__PURE__*/_jsx(\"textarea\",{required:true,ref:NewCommentRef,rows:\"4\",cols:\"50\"}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Comment!\"})]}):null,/*#__PURE__*/_jsx(\"h1\",{children:\"Comments Section: \"}),props.Comments[0]?props.Comments.map(function(CommentData){//iterates through the Comments prop, getting the CommentData of every comment consisting of its comment and commentor displayname\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[\" \",/*#__PURE__*/_jsx(Comment,{CommentData:CommentData,DeleteComment:DeleteComment,CurrUser:props.CurrUser}),\" \",/*#__PURE__*/_jsx(\"br\",{}),\" \"]},CommentData.commentid);//renders a Comment component for each CommentData\n}):/*#__PURE__*/_jsx(\"div\",{children:\" sorry, but there are no comments \"}),\" \"]});}export default CommentsSection;","map":{"version":3,"names":["Comment","React","useRef","CommentsSection","props","NewCommentRef","AddComment","event","preventDefault","NewComment","current","value","fetch","method","headers","body","JSON","stringify","PostID","Username","CurrUser","DeleteComment","CommentID","getComments","Comments","map","CommentData","commentid"],"sources":["C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/src/Components/CommentsSection.js"],"sourcesContent":["//Components imports\r\nimport Comment from './Comment.js';\r\n\r\nimport { React, useRef } from 'react';\r\n\r\nfunction CommentsSection(props) {\r\n    const NewCommentRef = useRef();\r\n\r\n    //function called to add a comment\r\n    async function AddComment(event) {\r\n        event.preventDefault(); //prevent form from refreshing upon submit\r\n\r\n        const NewComment = NewCommentRef.current.value; //get New comment from the form\r\n\r\n        //POST request to /addcomment with information on the new comment in its body to be added into DB\r\n        await fetch('http://localhost:3001/addcomment', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({PostID: props.PostID, NewComment: NewComment, Username: props.CurrUser})\r\n        })\r\n    }\r\n\r\n    //function called to delete a comment, called by DeleteComment() in Comment.js\r\n    async function DeleteComment(CommentID) {\r\n\r\n        //send a POST request to /deletecomment with CommentID in its body\r\n        await fetch('http://localhost:3001/deletecomment', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({CommentID: CommentID})\r\n        })\r\n\r\n        props.getComments() //get the updated list of comments\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* Form to add a new Comment is only shown if user is logged in */}\r\n            {props.CurrUser ?\r\n                <form onSubmit={AddComment}>\r\n                    <textarea required ref={NewCommentRef} rows='4' cols='50'></textarea><input type='submit' value='Comment!' />\r\n                </form> : null\r\n            }\r\n\r\n            {/* The rest of the comments section */}\r\n            <h1>Comments Section: </h1>\r\n            {(props.Comments[0] ? props.Comments.map(CommentData => { //iterates through the Comments prop, getting the CommentData of every comment consisting of its comment and commentor displayname\r\n                return <div key={CommentData.commentid}> <Comment CommentData={CommentData} DeleteComment={DeleteComment} CurrUser={props.CurrUser} /> <br /> </div> //renders a Comment component for each CommentData\r\n            }) : <div> sorry, but there are no comments </div>)} {/* if the Comments prop does have at least 1 entry, display a sorry, no comments message */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommentsSection;"],"mappings":"kUAAA;AACA,MAAOA,QAAO,KAAM,cAAc,CAElC,OAASC,KAAK,CAAEC,MAAM,KAAQ,OAAO,CAAC,wFAEtC,QAASC,gBAAe,CAACC,KAAK,CAAE,CAC5B,GAAMC,cAAa,CAAGH,MAAM,EAAE,CAE9B;AAAA,QACeI,WAAU,+CAazB;AAAA,6FAbA,iBAA0BC,KAAK,mIAC3BA,KAAK,CAACC,cAAc,EAAE,CAAE;AAElBC,UAAU,CAAGJ,aAAa,CAACK,OAAO,CAACC,KAAK,CAAE;AAEhD;AAAA,sBACMC,MAAK,CAAC,kCAAkC,CAAE,CAC5CC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAC,cAAc,CAAE,kBAAkB,CAAC,CAC7CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAACC,MAAM,CAAEd,KAAK,CAACc,MAAM,CAAET,UAAU,CAAEA,UAAU,CAAEU,QAAQ,CAAEf,KAAK,CAACgB,QAAQ,CAAC,CACjG,CAAC,CAAC,uDACL,qDAGcC,cAAa,sJAA5B,kBAA6BC,SAAS,+IAG5BV,MAAK,CAAC,qCAAqC,CAAE,CAC/CC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAC,cAAc,CAAE,kBAAkB,CAAC,CAC7CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAACK,SAAS,CAAEA,SAAS,CAAC,CAC/C,CAAC,CAAC,QAEFlB,KAAK,CAACmB,WAAW,EAAE,CAAC;AAAA,wDACvB,gDAED,mBACI,uBAEKnB,KAAK,CAACgB,QAAQ,cACX,cAAM,QAAQ,CAAEd,UAAW,wBACvB,iBAAU,QAAQ,MAAC,GAAG,CAAED,aAAc,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAY,4BAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAG,GAC1G,CAAG,IAAI,cAIlB,0CAA2B,CACzBD,KAAK,CAACoB,QAAQ,CAAC,CAAC,CAAC,CAAGpB,KAAK,CAACoB,QAAQ,CAACC,GAAG,CAAC,SAAAC,WAAW,CAAI,CAAE;AACtD,mBAAO,wCAAkC,KAAC,OAAO,EAAC,WAAW,CAAEA,WAAY,CAAC,aAAa,CAAEL,aAAc,CAAC,QAAQ,CAAEjB,KAAK,CAACgB,QAAS,EAAG,kBAAC,aAAM,OAA5HM,WAAW,CAACC,SAAS,CAA8G,CAAC;AACzJ,CAAC,CAAC,cAAG,2DAA6C,OAChD,CAEd,CAEA,cAAexB,gBAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}