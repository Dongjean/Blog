{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shind\\\\OneDrive\\\\Desktop\\\\coding project\\\\blog post\\\\blog_front\\\\src\\\\Components\\\\LikesSection.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LikesSection(props) {\n  _s();\n  const CurrUser = props.CurrUser;\n  const PostID = props.PostID;\n  const [LikesCount, setLikesCount] = useState(0);\n  const [isLiked, setLikedState] = useState(false);\n\n  //this runs only once on mount\n  useEffect(() => {\n    GetLikesCount(); //get number of likes no matter what\n    if (CurrUser) {\n      GetLikeState(); //only run if user is logged in\n    }\n  }, []);\n\n  //method to get the number of likes for the post\n  function GetLikesCount() {\n    //send a GET request to /getlikes with PostID as a parameter\n    fetch('http://localhost:3001/getlikescount/' + PostID).then(res => res.json()).then(response => {\n      const LikesCount = response.res;\n      console.log(LikesCount);\n      setLikesCount(LikesCount); //update the information stored in the LikesCount State\n    });\n  }\n\n  function Like(event) {\n    event.stopPropagation();\n    fetch('http://localhost:3001/addlike', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        PostID: PostID,\n        CurrUser: CurrUser\n      })\n    }).then(res => {\n      GetLikesCount();\n    } //update the likes count shown only after the post request is successful\n    );\n\n    setLikedState(true); //post is now liked\n  }\n\n  function Unlike(event) {\n    event.stopPropagation();\n    fetch('http://localhost:3001/removelike', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        PostID: PostID,\n        CurrUser: CurrUser\n      })\n    }).then(res => {\n      GetLikesCount();\n    } //update the likes count shown only after the post request is successful\n    );\n\n    setLikedState(false); //post is now unliked\n  }\n\n  //function called to get the state of whether or not the post is liked by user\n  function GetLikeState() {\n    fetch('http://localhost:3001/getlikestate/' + PostID + '/' + CurrUser).then(res => res.json()).then(response => {\n      console.log(response);\n      setLikedState(response.res);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Likes: \", LikesCount, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 33\n    }, this), CurrUser ?\n    //If client is logged in, then show Like button if post is not liked, and vice versa \n    isLiked ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: Unlike,\n        children: \"Unlike!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 57\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: Like,\n        children: \"Like!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(LikesSection, \"zTX+UY/LrD688scMxFIt9DZo0rU=\");\n_c = LikesSection;\nexport default LikesSection;\nvar _c;\n$RefreshReg$(_c, \"LikesSection\");","map":{"version":3,"names":["useState","useEffect","LikesSection","props","CurrUser","PostID","LikesCount","setLikesCount","isLiked","setLikedState","GetLikesCount","GetLikeState","fetch","then","res","json","response","console","log","Like","event","stopPropagation","method","headers","body","JSON","stringify","Unlike"],"sources":["C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/src/Components/LikesSection.js"],"sourcesContent":["import {useState, useEffect} from 'react';\r\n\r\nfunction LikesSection(props) {\r\n    const CurrUser = props.CurrUser;\r\n    const PostID = props.PostID;\r\n    const [LikesCount, setLikesCount] = useState(0);\r\n    const [isLiked, setLikedState] = useState(false);\r\n\r\n    //this runs only once on mount\r\n    useEffect(() => {\r\n        GetLikesCount(); //get number of likes no matter what\r\n        if (CurrUser) {\r\n            GetLikeState(); //only run if user is logged in\r\n        }\r\n    }, [])\r\n\r\n    //method to get the number of likes for the post\r\n    function GetLikesCount() {\r\n        //send a GET request to /getlikes with PostID as a parameter\r\n        fetch('http://localhost:3001/getlikescount/' + PostID).then(\r\n            res => res.json()\r\n        ).then(\r\n            response => {\r\n                const LikesCount = response.res\r\n                console.log(LikesCount)\r\n                setLikesCount(LikesCount) //update the information stored in the LikesCount State\r\n            }\r\n        )\r\n    }\r\n\r\n    function Like(event) {\r\n        event.stopPropagation()\r\n        fetch('http://localhost:3001/addlike', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({PostID: PostID, CurrUser: CurrUser})\r\n        }).then(\r\n            res => {\r\n            GetLikesCount()\r\n            } //update the likes count shown only after the post request is successful\r\n        )\r\n        setLikedState(true) //post is now liked\r\n    }\r\n\r\n    function Unlike(event) {\r\n        event.stopPropagation()\r\n        fetch('http://localhost:3001/removelike', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({PostID: PostID, CurrUser: CurrUser})\r\n        }).then(\r\n            res => {\r\n            GetLikesCount()\r\n            } //update the likes count shown only after the post request is successful\r\n        )\r\n        setLikedState(false) //post is now unliked\r\n    }\r\n\r\n    //function called to get the state of whether or not the post is liked by user\r\n    function GetLikeState() {\r\n        fetch('http://localhost:3001/getlikestate/' + PostID + '/' + CurrUser).then(\r\n            res => res.json()\r\n        ).then(\r\n            response => {\r\n                console.log(response)\r\n                setLikedState(response.res)\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* Displays the number of likes of the post no matter what */}\r\n            Likes: {LikesCount} <br />\r\n\r\n            {/* Only Display the option to like or unlike if loggedin-if CurrUser is not null */}\r\n            {CurrUser ?\r\n\r\n            //If client is logged in, then show Like button if post is not liked, and vice versa \r\n            (isLiked ? \r\n                <div>\r\n                    <div onClick={Unlike}>Unlike!</div> <br />\r\n                </div>: \r\n                <div>\r\n                    <div onClick={Like}>Like!</div> <br />\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LikesSection;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}