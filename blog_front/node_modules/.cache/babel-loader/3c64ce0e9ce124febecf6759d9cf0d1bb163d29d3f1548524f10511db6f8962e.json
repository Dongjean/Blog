{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";//Components imports\nimport CommentsSection from'../Components/CommentsSection';import LikesSection from'../Components/LikesSection';import{useState,useEffect}from'react';import{useLocation}from'react-router-dom';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function OpenBlog(props){var Data=useLocation().state;//get data about Post from App.js\nvar isViewerAuthor=Data.CurrUser==Data.Username;//isViewerAuthor is true if Data.CurrUser = Data.Username, AKA the viewer is the author of the post\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isCommentsOpen=_useState2[0],setCommentsOpenState=_useState2[1];//comments are not open from the beginning by default\nvar _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),Comments=_useState4[0],setCommentsState=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),Cats=_useState6[0],setCats=_useState6[1];var PostID=Data.PostID;//runs only once on mount\nuseEffect(function(){getCats();},[]);function getCats(){fetch('/getcategories/'+PostID).then(function(res){return res.json();}).then(function(response){setCats(response.res);});}//function called to delete the post\nfunction DeletePost(){return _DeletePost.apply(this,arguments);}function _DeletePost(){_DeletePost=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch('/deleteblog',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({PostID:PostID})});case 2:props.Login(Data.Username,Data.DisplayName);//go back to the HomePage still logged in as the user\ncase 3:case\"end\":return _context.stop();}}},_callee);}));return _DeletePost.apply(this,arguments);}function getComments(){//send a GET request to /getcomments with PostID as a parameter\nfetch('/getcomments/'+PostID).then(function(res){return res.json();}).then(function(response){var Comments=response.res;setCommentsOpenState(true);//set the isCommentsOpen State to true to show comments\nsetCommentsState(Comments);//update the information stored in the Comments State\n});}function closeComments(){setCommentsOpenState(false);//set the isCommentsOpen State to false to hide comments\n}function UpdatePost(Post){props.UpdatePost(Post,Cats);}return/*#__PURE__*/_jsxs(\"div\",{children:[\" \",/*#__PURE__*/_jsxs(\"h1\",{children:[\"Title: \",Data.Title]}),\" \",/*#__PURE__*/_jsx(\"br\",{}),\"Author: \",Data.DisplayName,\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"Categories: \",Cats.filter(function(Cat){return Cat.categoryid!==0;}).map(function(Cat){//Cats.filter..... returns the array of Categories Cats without the All Category\nreturn/*#__PURE__*/_jsx(\"div\",{children:Cat.category},Cat.categoryid);//Displays the Category\n}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{src:\"data:image/jpeg;base64,\".concat(Data.Image),alt:Data.ImageName}),\" \",/*#__PURE__*/_jsx(\"br\",{}),\" \",Data.PostText,\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(LikesSection,{CurrUser:Data.CurrUser,PostID:Data.PostID}),isViewerAuthor?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:DeletePost,children:\"Delete Post\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return UpdatePost(Data);},children:\"Update Post\"})]}):null,\" \",isCommentsOpen?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(CommentsSection,{Comments:Comments,PostID:Data.PostID,CurrUser:Data.CurrUser,getComments:getComments}),\" \",/*#__PURE__*/_jsx(\"button\",{onClick:closeComments,children:\"Close Comments\"}),\" \"]}):/*#__PURE__*/_jsx(\"button\",{onClick:getComments,children:\"See Comments\"}),\" \"]});}export default OpenBlog;","map":{"version":3,"names":["CommentsSection","LikesSection","useState","useEffect","useLocation","OpenBlog","props","Data","state","isViewerAuthor","CurrUser","Username","isCommentsOpen","setCommentsOpenState","Comments","setCommentsState","Cats","setCats","PostID","getCats","fetch","then","res","json","response","DeletePost","method","headers","body","JSON","stringify","Login","DisplayName","getComments","closeComments","UpdatePost","Post","Title","filter","Cat","categoryid","map","category","Image","ImageName","PostText"],"sources":["C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/src/Pages/OpenBlog.js"],"sourcesContent":["//Components imports\r\nimport CommentsSection from '../Components/CommentsSection';\r\nimport LikesSection from '../Components/LikesSection';\r\n\r\nimport {useState, useEffect} from 'react';\r\nimport {useLocation} from 'react-router-dom';\r\n\r\nfunction OpenBlog(props) {\r\n    const Data = useLocation().state; //get data about Post from App.js\r\n    const isViewerAuthor = (Data.CurrUser == Data.Username); //isViewerAuthor is true if Data.CurrUser = Data.Username, AKA the viewer is the author of the post\r\n    const [isCommentsOpen, setCommentsOpenState] = useState(false); //comments are not open from the beginning by default\r\n    const [Comments, setCommentsState] = useState(null);\r\n    const [Cats, setCats] = useState([]);\r\n    const PostID = Data.PostID;\r\n\r\n    //runs only once on mount\r\n    useEffect(() => {\r\n        getCats()\r\n    }, [])\r\n\r\n    function getCats() {\r\n        fetch('/getcategories/' + PostID).then(\r\n            res => res.json()\r\n        ).then(\r\n            response => {\r\n                setCats(response.res)\r\n            }\r\n        )\r\n    }\r\n\r\n    //function called to delete the post\r\n    async function DeletePost() {\r\n\r\n        //send a POST request to /deleteblog with PostID in its body\r\n        await fetch('/deleteblog', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({PostID: PostID})\r\n        })\r\n        \r\n        props.Login(Data.Username, Data.DisplayName); //go back to the HomePage still logged in as the user\r\n    }\r\n\r\n    function getComments() {\r\n\r\n        //send a GET request to /getcomments with PostID as a parameter\r\n        fetch('/getcomments/' + PostID).then(\r\n            res => res.json()\r\n        ).then(\r\n            response => {\r\n                const Comments = response.res\r\n                setCommentsOpenState(true) //set the isCommentsOpen State to true to show comments\r\n                setCommentsState(Comments) //update the information stored in the Comments State\r\n            }\r\n        )\r\n    }\r\n\r\n    function closeComments() {\r\n        setCommentsOpenState(false) //set the isCommentsOpen State to false to hide comments\r\n    }\r\n\r\n    function UpdatePost(Post) {\r\n        props.UpdatePost(Post, Cats)\r\n    }\r\n\r\n    return (\r\n        <div> {/* diplaying the blog post itself first */}\r\n            <h1>Title: {Data.Title}</h1> <br />\r\n            Author: {Data.DisplayName} <br /><br />\r\n            Categories: {Cats.filter(Cat => Cat.categoryid !== 0).map(Cat => { //Cats.filter..... returns the array of Categories Cats without the All Category\r\n                return <div key={Cat.categoryid}>{Cat.category}</div> //Displays the Category\r\n            })}\r\n            <br />\r\n            <img src={`data:image/jpeg;base64,${Data.Image}`} alt={Data.ImageName} /> <br /> {/* Display the image base64 image data as an image */}\r\n            {Data.PostText} <br />\r\n\r\n            {/* Displaying Post's Likes and buttons to like and unlike */}\r\n            <LikesSection CurrUser={Data.CurrUser} PostID={Data.PostID} />\r\n\r\n            {isViewerAuthor ? <div>\r\n                <button onClick={DeletePost}>Delete Post</button>\r\n                <button onClick={() => UpdatePost(Data)}>Update Post</button>\r\n            </div> : null} {/* Only Displays if isViewerAuthor is true-if the viewer of the post is the author themselves, otherwise displays null. This button deletes the post */}\r\n\r\n            {/* Displays Button to open the Comments section if not already open, and a Button to close it if it already is open */}\r\n            {isCommentsOpen ? \r\n            <div>\r\n                <CommentsSection Comments={Comments} PostID={Data.PostID} CurrUser={Data.CurrUser} getComments={getComments} /> {/* Display the comments section */}\r\n                <button onClick={closeComments}>Close Comments</button> {/* Display the close button */}\r\n            </div> :\r\n            <button onClick={getComments}>See Comments</button>} {/* Display the open button */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpenBlog;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}