{"ast":null,"code":"import _slicedToArray from\"C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{React,useRef,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Signup(props){var NUserRef=useRef();var NPWRef=useRef();var NPW2Ref=useRef();var NDisplayRef=useRef();var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isPWValid=_useState2[0],setPWState=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),isUserValid=_useState4[0],setUserState=_useState4[1];function onSubmit(event){event.preventDefault();//prevent form from refreshing upon submit\n//get form data\nvar NUser=NUserRef.current.value;var NPW=NPWRef.current.value;var NPW2=NPW2Ref.current.value;var NDisplay=NDisplayRef.current.value;//validity check for PW\nif(NPW!==NPW2){setPWState(false);//set the state of isPWValid to false such that error message is displayed after re-render\n}else{if(!isPWValid){setPWState(true);//set the state of isPWValid to true such that page is re-rendered to update the error information accordingly\n}}//validity check for Username\nfetch('/signup',{//send POST request to the backend with the new account credentials to check if the username already exists, and adds the account to DB if it is\nmethod:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({NUsername:NUser,NPassword:NPW,NDisplay:NDisplay,isPWValid:isPWValid})}).then(function(res){return res.json();}).then(function(response){var Response=response.res;if(Response){//if Reponse is not null, username is valid\nif(isPWValid){//check if the password inputted is valid, if it is,\nprops.Login(NUser,NDisplay);//login to the newly-created account\n}else{setUserState(true);//if password is not valid, just set the isUserValid to true state such that page is re-rendered to update the error information accordingly\n}}else{setUserState(false);//if reponse is null, username is invalid, thus set the isUserValid state to false such that page is re-rendered to update the error information accordingly\n}});}return/*#__PURE__*/_jsxs(\"div\",{children:[\"Welcome to the Signup page! \",/*#__PURE__*/_jsx(\"br\",{}),isUserValid?null:/*#__PURE__*/_jsx(\"div\",{children:\"The Username is unavailable!\"}),\" \",isPWValid?null:/*#__PURE__*/_jsx(\"div\",{children:\"The Passwords do not match!\"}),\" \",/*#__PURE__*/_jsxs(\"form\",{onSubmit:onSubmit,children:[\" \",\"New Username: \",/*#__PURE__*/_jsx(\"input\",{type:\"text\",required:true,ref:NUserRef}),\" \",/*#__PURE__*/_jsx(\"br\",{}),\"New Password: \",/*#__PURE__*/_jsx(\"input\",{type:\"text\",required:true,ref:NPWRef}),\" \",/*#__PURE__*/_jsx(\"br\",{}),\"Confirm Password: \",/*#__PURE__*/_jsx(\"input\",{type:\"text\",required:true,ref:NPW2Ref}),\" \",/*#__PURE__*/_jsx(\"br\",{}),\"Display Name: \",/*#__PURE__*/_jsx(\"input\",{type:\"text\",required:true,ref:NDisplayRef}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"signup\"})]})]});}export default Signup;","map":{"version":3,"names":["React","useRef","useState","Signup","props","NUserRef","NPWRef","NPW2Ref","NDisplayRef","isPWValid","setPWState","isUserValid","setUserState","onSubmit","event","preventDefault","NUser","current","value","NPW","NPW2","NDisplay","fetch","method","headers","body","JSON","stringify","NUsername","NPassword","then","res","json","response","Response","Login"],"sources":["C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/src/Pages/Signup.js"],"sourcesContent":["import { React, useRef, useState } from 'react';\r\n\r\nfunction Signup(props) {\r\n    const NUserRef = useRef();\r\n    const NPWRef = useRef();\r\n    const NPW2Ref = useRef();\r\n    const NDisplayRef = useRef();\r\n\r\n    const [isPWValid, setPWState] = useState(true);\r\n    const [isUserValid, setUserState] = useState(true);\r\n\r\n    function onSubmit(event) {\r\n        event.preventDefault(); //prevent form from refreshing upon submit\r\n\r\n        //get form data\r\n        const NUser = NUserRef.current.value\r\n        const NPW = NPWRef.current.value\r\n        const NPW2 = NPW2Ref.current.value\r\n        const NDisplay = NDisplayRef.current.value\r\n\r\n        //validity check for PW\r\n        if (NPW !== NPW2) {\r\n            setPWState(false) //set the state of isPWValid to false such that error message is displayed after re-render\r\n        } else {\r\n            if (!isPWValid) {\r\n                setPWState(true) //set the state of isPWValid to true such that page is re-rendered to update the error information accordingly\r\n            }\r\n        }\r\n\r\n        //validity check for Username\r\n        fetch('/signup', { //send POST request to the backend with the new account credentials to check if the username already exists, and adds the account to DB if it is\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({NUsername: NUser, NPassword: NPW, NDisplay: NDisplay, isPWValid: isPWValid})\r\n        }).then(\r\n            res => {\r\n                return res.json()\r\n            }\r\n        ).then(\r\n            response => {\r\n                const Response = response.res\r\n                if (Response) { //if Reponse is not null, username is valid\r\n                    if (isPWValid) { //check if the password inputted is valid, if it is,\r\n                        props.Login(NUser, NDisplay) //login to the newly-created account\r\n                    } else {\r\n                        setUserState(true) //if password is not valid, just set the isUserValid to true state such that page is re-rendered to update the error information accordingly\r\n                    }\r\n                } else {\r\n                    setUserState(false) //if reponse is null, username is invalid, thus set the isUserValid state to false such that page is re-rendered to update the error information accordingly\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            Welcome to the Signup page! <br />\r\n            { isUserValid ? null : <div>The Username is unavailable!</div> } {/* displays only if isUserValid is false-Username is invalid, otherwise displays null */}\r\n            { isPWValid ? null : <div>The Passwords do not match!</div> } {/* displays only if isPWValid is false-Password is invalid, otherwise displays null */}\r\n            <form onSubmit={onSubmit}> {/* form calls method obSubmit() on submittion of form */}\r\n                New Username: <input type='text' required ref={NUserRef} /> <br />\r\n                New Password: <input type='text' required ref={NPWRef} /> <br />\r\n                Confirm Password: <input type='text' required ref={NPW2Ref} /> <br />\r\n                Display Name: <input type='text' required ref={NDisplayRef} /> <br />\r\n                <input type='submit' value='signup' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup;"],"mappings":"yJAAA,OAASA,KAAK,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CAAC,wFAEhD,QAASC,OAAM,CAACC,KAAK,CAAE,CACnB,GAAMC,SAAQ,CAAGJ,MAAM,EAAE,CACzB,GAAMK,OAAM,CAAGL,MAAM,EAAE,CACvB,GAAMM,QAAO,CAAGN,MAAM,EAAE,CACxB,GAAMO,YAAW,CAAGP,MAAM,EAAE,CAE5B,cAAgCC,QAAQ,CAAC,IAAI,CAAC,wCAAvCO,SAAS,eAAEC,UAAU,eAC5B,eAAoCR,QAAQ,CAAC,IAAI,CAAC,yCAA3CS,WAAW,eAAEC,YAAY,eAEhC,QAASC,SAAQ,CAACC,KAAK,CAAE,CACrBA,KAAK,CAACC,cAAc,EAAE,CAAE;AAExB;AACA,GAAMC,MAAK,CAAGX,QAAQ,CAACY,OAAO,CAACC,KAAK,CACpC,GAAMC,IAAG,CAAGb,MAAM,CAACW,OAAO,CAACC,KAAK,CAChC,GAAME,KAAI,CAAGb,OAAO,CAACU,OAAO,CAACC,KAAK,CAClC,GAAMG,SAAQ,CAAGb,WAAW,CAACS,OAAO,CAACC,KAAK,CAE1C;AACA,GAAIC,GAAG,GAAKC,IAAI,CAAE,CACdV,UAAU,CAAC,KAAK,CAAC,CAAC;AACtB,CAAC,IAAM,CACH,GAAI,CAACD,SAAS,CAAE,CACZC,UAAU,CAAC,IAAI,CAAC,CAAC;AACrB,CACJ,CAEA;AACAY,KAAK,CAAC,SAAS,CAAE,CAAE;AACfC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAC,cAAc,CAAE,kBAAkB,CAAC,CAC7CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAACC,SAAS,CAAEZ,KAAK,CAAEa,SAAS,CAAEV,GAAG,CAAEE,QAAQ,CAAEA,QAAQ,CAAEZ,SAAS,CAAEA,SAAS,CAAC,CACrG,CAAC,CAAC,CAACqB,IAAI,CACH,SAAAC,GAAG,CAAI,CACH,MAAOA,IAAG,CAACC,IAAI,EAAE,CACrB,CAAC,CACJ,CAACF,IAAI,CACF,SAAAG,QAAQ,CAAI,CACR,GAAMC,SAAQ,CAAGD,QAAQ,CAACF,GAAG,CAC7B,GAAIG,QAAQ,CAAE,CAAE;AACZ,GAAIzB,SAAS,CAAE,CAAE;AACbL,KAAK,CAAC+B,KAAK,CAACnB,KAAK,CAAEK,QAAQ,CAAC,CAAC;AACjC,CAAC,IAAM,CACHT,YAAY,CAAC,IAAI,CAAC,CAAC;AACvB,CACJ,CAAC,IAAM,CACHA,YAAY,CAAC,KAAK,CAAC,CAAC;AACxB,CACJ,CAAC,CACJ,CACL,CAEA,mBACI,mEACgC,aAAM,CAChCD,WAAW,CAAG,IAAI,cAAG,qDAAuC,KAC5DF,SAAS,CAAG,IAAI,cAAG,oDAAsC,kBAC3D,cAAM,QAAQ,CAAEI,QAAS,6CACP,cAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,MAAC,GAAG,CAAER,QAAS,EAAG,kBAAC,aAAM,+BACpD,cAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,MAAC,GAAG,CAAEC,MAAO,EAAG,kBAAC,aAAM,mCAC9C,cAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,MAAC,GAAG,CAAEC,OAAQ,EAAG,kBAAC,aAAM,+BACvD,cAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,MAAC,GAAG,CAAEC,WAAY,EAAG,kBAAC,aAAM,cACrE,cAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAG,GACnC,GACL,CAEd,CAEA,cAAeL,OAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}