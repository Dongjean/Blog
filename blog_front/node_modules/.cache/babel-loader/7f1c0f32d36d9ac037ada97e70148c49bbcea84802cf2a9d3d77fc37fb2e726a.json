{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shind\\\\OneDrive\\\\Desktop\\\\coding project\\\\blog post\\\\blog_front\\\\src\\\\Pages\\\\Main.js\",\n  _s = $RefreshSig$();\n//Components imports\nimport BlogPost from '../Components/BlogPost.js';\nimport Category from '../Components/Category.js';\nimport { React, useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main(props) {\n  _s();\n  const [Posts, setPosts] = useState(null);\n  const [Cats, setCats] = useState(null);\n  const nullCat = {\n    categoryid: -1,\n    category: 'null'\n  };\n  const SelectedCats = useRef([nullCat]);\n  const CurrUser = props.CurrUser;\n\n  //runs only on mount\n  useEffect(() => {\n    GetAllCats();\n  }, []);\n  async function GetBlogs(Cats) {\n    const StrCats = Cats.map(Cat => {\n      return Cat.categoryid;\n    }).toString(); //converts the array of Categories into a string format to be sent in GET request\n\n    fetch('http://localhost:3001/getblogs/' + StrCats).then(\n    //fetches the blog posts under the requested categories from backend\n    res => {\n      return res.json();\n    }).then(response => {\n      const Posts = response.res; //response is an array of Posts if blog posts exists, and null otherwise\n      setPosts(Posts); //sets the Posts state to the response\n    });\n  }\n\n  function OpenBlog(Post) {\n    props.OpenBlog(Post);\n  }\n  function GetAllCats() {\n    fetch('http://localhost:3001/getallcats').then(\n    //fetches all the categories from backend\n    res => {\n      return res.json();\n    }).then(response => {\n      const AllCats = response.res; //response is an array of Categories\n      setCats(AllCats); //sets the Categories state to the response\n    });\n  }\n\n  function AddCatSelection(Cat) {\n    SelectedCats.current = SelectedCats.current.filter(SelectedCat => SelectedCat.categoryid !== -1); //removes null category from SelectedCats.current\n    SelectedCats.current.push(Cat); //adds Category Cat to SelectedCats.current\n    GetBlogs(SelectedCats.current); //get all the blogs for all categories after the selected categories have been modified\n  }\n\n  function RemoveCatSelection(Cat) {\n    SelectedCats.current = SelectedCats.current.filter(SelectedCat => SelectedCat.categoryid !== Cat.categoryid); //removes Category Cat from SelectdCats.current\n\n    //if after removal SelectedCats.current is empty, add the nullCat\n    if (SelectedCats.current.length == 0) {\n      SelectedCats.current.push(nullCat);\n    }\n    GetBlogs(SelectedCats.current); //get all the blogs for all categories after the selected categories have been modified\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [Cats ? Cats.map(Cat => {\n      return /*#__PURE__*/_jsxDEV(Category, {\n        Cat: Cat,\n        AddCatSelection: AddCatSelection,\n        RemoveCatSelection: RemoveCatSelection\n      }, Cat.categoryid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this);\n    }) : null, Posts ? Posts.map(Post => {\n      {/* iterate through the Posts array if Posts is not null, and each post is Post */}\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => OpenBlog(Post),\n          children: [\" \", /*#__PURE__*/_jsxDEV(BlogPost, {\n            Post: Post,\n            CurrUser: CurrUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)]\n      }, Post.PostID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"There are no posts yet :(\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 18\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(Main, \"NAu/ICU5vOG4iM2YgG9xUrmZqmM=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["BlogPost","Category","React","useState","useEffect","useRef","Main","props","Posts","setPosts","Cats","setCats","nullCat","categoryid","category","SelectedCats","CurrUser","GetAllCats","GetBlogs","StrCats","map","Cat","toString","fetch","then","res","json","response","OpenBlog","Post","AllCats","AddCatSelection","current","filter","SelectedCat","push","RemoveCatSelection","length","PostID"],"sources":["C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/src/Pages/Main.js"],"sourcesContent":["//Components imports\r\nimport BlogPost from '../Components/BlogPost.js'\r\nimport Category from '../Components/Category.js';\r\n\r\nimport {React, useState, useEffect, useRef} from 'react';\r\n\r\nfunction Main(props) {\r\n    const [Posts, setPosts] = useState(null)\r\n    const [Cats, setCats] = useState(null)\r\n    const nullCat = {categoryid: -1, category: 'null'}\r\n    const SelectedCats = useRef([nullCat])\r\n\r\n    const CurrUser = props.CurrUser;\r\n\r\n    //runs only on mount\r\n    useEffect( () => {\r\n        GetAllCats()\r\n    }, [])\r\n\r\n    async function GetBlogs(Cats) {\r\n        const StrCats = Cats.map(Cat => {return Cat.categoryid}).toString() //converts the array of Categories into a string format to be sent in GET request\r\n\r\n        fetch('http://localhost:3001/getblogs/' + StrCats).then( //fetches the blog posts under the requested categories from backend\r\n            res => {\r\n                return res.json()\r\n            }\r\n        ).then(\r\n            response => {\r\n                const Posts = response.res //response is an array of Posts if blog posts exists, and null otherwise\r\n                setPosts(Posts) //sets the Posts state to the response\r\n            }\r\n        )\r\n    }\r\n\r\n    function OpenBlog(Post) {\r\n        props.OpenBlog(Post)\r\n    }\r\n\r\n    function GetAllCats() {\r\n        fetch('http://localhost:3001/getallcats').then( //fetches all the categories from backend\r\n            res => {\r\n                return res.json()\r\n            }\r\n        ).then(\r\n            response => {\r\n                const AllCats = response.res //response is an array of Categories\r\n                setCats(AllCats) //sets the Categories state to the response\r\n            }\r\n        )\r\n    }\r\n\r\n    function AddCatSelection(Cat) {\r\n        SelectedCats.current = SelectedCats.current.filter(SelectedCat => SelectedCat.categoryid !== -1) //removes null category from SelectedCats.current\r\n        SelectedCats.current.push(Cat) //adds Category Cat to SelectedCats.current\r\n        GetBlogs(SelectedCats.current) //get all the blogs for all categories after the selected categories have been modified\r\n    }\r\n\r\n    function RemoveCatSelection(Cat) {\r\n        SelectedCats.current = SelectedCats.current.filter(SelectedCat => SelectedCat.categoryid !== Cat.categoryid) //removes Category Cat from SelectdCats.current\r\n\r\n        //if after removal SelectedCats.current is empty, add the nullCat\r\n        if (SelectedCats.current.length == 0) {\r\n            SelectedCats.current.push(nullCat)\r\n        }\r\n        GetBlogs(SelectedCats.current) //get all the blogs for all categories after the selected categories have been modified\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* Displays All Categories if it is not null */}\r\n            {Cats ? Cats.map(Cat => {\r\n                return (\r\n                    <Category key={Cat.categoryid} Cat={Cat} AddCatSelection={AddCatSelection} RemoveCatSelection={RemoveCatSelection} />\r\n                )\r\n            }) : null}\r\n            \r\n            {Posts ? Posts.map(Post => { {/* iterate through the Posts array if Posts is not null, and each post is Post */}\r\n                return (\r\n                    <div key={Post.PostID}>\r\n                        <button onClick={() => OpenBlog(Post)}> {/* Call the OpenBlog method with parameter Post */}\r\n                            <BlogPost Post={Post} CurrUser={CurrUser} /> {/* Display the specific Blog Post, passing in information of Post as a prop Post */}\r\n                        </button>\r\n                        <br />\r\n                    </div>\r\n                )\r\n            }) : <div>There are no posts yet :(</div> } {/* If Posts is null-if there are no Posts */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}