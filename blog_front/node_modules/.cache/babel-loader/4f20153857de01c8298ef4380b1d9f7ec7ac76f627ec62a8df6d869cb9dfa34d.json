{"ast":null,"code":"import _slicedToArray from\"C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{React,useState,useEffect,useRef}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Category(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isChecked=_useState2[0],setChecked=_useState2[1];var firstrender=useRef(true);//runs only on mount to check if the Category is All, since we want All to be initially selected\nuseEffect(function(){if(props.Cat.categoryid==0){setChecked(true);}},[]);//update the categories whenever isChecked changes, making sure it doesnt run on the first render\nuseEffect(function(){if(firstrender.current==true){firstrender.current=false;//update firstrender.current such that we now know that the first render had already passed\n}else{UpdateCat();//update categories\n}},[isChecked]);function CatClicked(){setChecked(!isChecked);}function UpdateCat(){if(isChecked){props.AddCatSelection(props.Cat);}if(!isChecked){props.RemoveCatSelection(props.Cat);}}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",onClick:CatClicked,checked:isChecked,readOnly:true}),\" \",props.Cat.category]});}export default Category;","map":{"version":3,"names":["React","useState","useEffect","useRef","Category","props","isChecked","setChecked","firstrender","Cat","categoryid","current","UpdateCat","CatClicked","AddCatSelection","RemoveCatSelection","category"],"sources":["C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/src/Components/Category.js"],"sourcesContent":["import { React, useState, useEffect, useRef } from 'react';\r\n\r\nfunction Category(props) {\r\n    const [isChecked, setChecked] = useState(false)\r\n    const firstrender = useRef(true);\r\n\r\n    //runs only on mount to check if the Category is All, since we want All to be initially selected\r\n    useEffect(() => {\r\n        if (props.Cat.categoryid == 0) {\r\n            setChecked(true)\r\n        }\r\n    }, [])\r\n\r\n    //update the categories whenever isChecked changes, making sure it doesnt run on the first render\r\n    useEffect(() => {\r\n        if (firstrender.current == true) {\r\n            firstrender.current = false //update firstrender.current such that we now know that the first render had already passed\r\n        } else {\r\n            UpdateCat() //update categories\r\n        }\r\n    }, [isChecked])\r\n\r\n    function CatClicked() {\r\n        setChecked(!isChecked)\r\n    }\r\n\r\n    function UpdateCat() {\r\n        if (isChecked) {\r\n            props.AddCatSelection(props.Cat)\r\n        }\r\n\r\n        if (!isChecked) {\r\n            props.RemoveCatSelection(props.Cat)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type='checkbox' onClick={CatClicked} checked={isChecked} readOnly/> {/* made checkbox readonly for this method as we re-render each time it is clicked */}\r\n            {props.Cat.category}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Category;"],"mappings":"yJAAA,OAASA,KAAK,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAAC,wFAE3D,QAASC,SAAQ,CAACC,KAAK,CAAE,CACrB,cAAgCJ,QAAQ,CAAC,KAAK,CAAC,wCAAxCK,SAAS,eAAEC,UAAU,eAC5B,GAAMC,YAAW,CAAGL,MAAM,CAAC,IAAI,CAAC,CAEhC;AACAD,SAAS,CAAC,UAAM,CACZ,GAAIG,KAAK,CAACI,GAAG,CAACC,UAAU,EAAI,CAAC,CAAE,CAC3BH,UAAU,CAAC,IAAI,CAAC,CACpB,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN;AACAL,SAAS,CAAC,UAAM,CACZ,GAAIM,WAAW,CAACG,OAAO,EAAI,IAAI,CAAE,CAC7BH,WAAW,CAACG,OAAO,CAAG,KAAK,CAAC;AAChC,CAAC,IAAM,CACHC,SAAS,EAAE,CAAC;AAChB,CACJ,CAAC,CAAE,CAACN,SAAS,CAAC,CAAC,CAEf,QAASO,WAAU,EAAG,CAClBN,UAAU,CAAC,CAACD,SAAS,CAAC,CAC1B,CAEA,QAASM,UAAS,EAAG,CACjB,GAAIN,SAAS,CAAE,CACXD,KAAK,CAACS,eAAe,CAACT,KAAK,CAACI,GAAG,CAAC,CACpC,CAEA,GAAI,CAACH,SAAS,CAAE,CACZD,KAAK,CAACU,kBAAkB,CAACV,KAAK,CAACI,GAAG,CAAC,CACvC,CACJ,CAEA,mBACI,oCACI,cAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAEI,UAAW,CAAC,OAAO,CAAEP,SAAU,CAAC,QAAQ,OAAE,KACzED,KAAK,CAACI,GAAG,CAACO,QAAQ,GACjB,CAGd,CAEA,cAAeZ,SAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}