{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shind\\\\OneDrive\\\\Desktop\\\\coding project\\\\blog post\\\\blog_front\\\\src\\\\Components\\\\BlogPost.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BlogPost(props) {\n  _s();\n  const PostID = props.Post.PostID;\n  const [LikesCount, setLikesCount] = useState(0);\n  console.log(props.Post);\n\n  //only runs once on mount\n  useEffect(() => {\n    GetLikesCount();\n  }, []);\n\n  //method to get the number of likes for the post\n  function GetLikesCount() {\n    //send a GET request to /getlikes with PostID as a parameter\n    fetch('http://localhost:3001/getlikes/' + PostID).then(res => res.json()).then(response => {\n      const LikesCount = response.res;\n      setLikesCount(LikesCount); //update the information stored in the LikesCount State\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Title: \", props.Post.Title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 48\n    }, this), \"Author: \", props.Post.DisplayName, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 46\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `data:image/jpeg;base64,${props.Post.Image}`,\n      alt: props.Post.ImageName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 99\n    }, this), \" \", props.Post.PostText, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 35\n    }, this), \"Likes: \", LikesCount]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(BlogPost, \"bXcIxkAzJ5IC36Vdy1jclF3KWEw=\");\n_c = BlogPost;\nexport default BlogPost;\nvar _c;\n$RefreshReg$(_c, \"BlogPost\");","map":{"version":3,"names":["useState","useEffect","BlogPost","props","PostID","Post","LikesCount","setLikesCount","console","log","GetLikesCount","fetch","then","res","json","response","Title","DisplayName","Image","ImageName","PostText"],"sources":["C:/Users/shind/OneDrive/Desktop/coding project/blog post/blog_front/src/Components/BlogPost.js"],"sourcesContent":["import {useState, useEffect} from 'react';\r\n\r\nfunction BlogPost(props) {\r\n    const PostID = props.Post.PostID;\r\n    const [LikesCount, setLikesCount] = useState(0);\r\n    console.log(props.Post)\r\n\r\n    //only runs once on mount\r\n    useEffect(() => {\r\n        GetLikesCount()\r\n    }, [])\r\n\r\n    //method to get the number of likes for the post\r\n    function GetLikesCount() {\r\n        //send a GET request to /getlikes with PostID as a parameter\r\n        fetch('http://localhost:3001/getlikes/' + PostID).then(\r\n            res => res.json()\r\n        ).then(\r\n            response => {\r\n                const LikesCount = response.res\r\n                setLikesCount(LikesCount) //update the information stored in the LikesCount State\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Title: {props.Post.Title}</h1> <br />\r\n            Author: {props.Post.DisplayName} <br />\r\n            <img src={`data:image/jpeg;base64,${props.Post.Image}`} alt={props.Post.ImageName} /> <br /> {/* Display the image base64 image data as an image */}\r\n            {props.Post.PostText} <br />\r\n\r\n            {/* Displaying Post Likes Displayers and Mutator buttons */}\r\n            Likes: {LikesCount} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlogPost;"],"mappings":";;AAAA,SAAQA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAC;AAE1C,SAASC,QAAQ,CAACC,KAAK,EAAE;EAAA;EACrB,MAAMC,MAAM,GAAGD,KAAK,CAACE,IAAI,CAACD,MAAM;EAChC,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAC/CQ,OAAO,CAACC,GAAG,CAACN,KAAK,CAACE,IAAI,CAAC;;EAEvB;EACAJ,SAAS,CAAC,MAAM;IACZS,aAAa,EAAE;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,SAASA,aAAa,GAAG;IACrB;IACAC,KAAK,CAAC,iCAAiC,GAAGP,MAAM,CAAC,CAACQ,IAAI,CAClDC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CACpB,CAACF,IAAI,CACFG,QAAQ,IAAI;MACR,MAAMT,UAAU,GAAGS,QAAQ,CAACF,GAAG;MAC/BN,aAAa,CAACD,UAAU,CAAC,EAAC;IAC9B,CAAC,CACJ;EACL;;EAEA,oBACI;IAAA,wBACI;MAAA,sBAAYH,KAAK,CAACE,IAAI,CAACW,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,oBAAC;MAAA;MAAA;MAAA;IAAA,QAAM,cAChCb,KAAK,CAACE,IAAI,CAACY,WAAW,oBAAE;MAAA;MAAA;MAAA;IAAA,QAAM,eACvC;MAAK,GAAG,EAAG,0BAAyBd,KAAK,CAACE,IAAI,CAACa,KAAM,EAAE;MAAC,GAAG,EAAEf,KAAK,CAACE,IAAI,CAACc;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG,oBAAC;MAAA;MAAA;MAAA;IAAA,QAAM,OAC3FhB,KAAK,CAACE,IAAI,CAACe,QAAQ,oBAAE;MAAA;MAAA;MAAA;IAAA,QAAM,aAGpBd,UAAU;EAAA;IAAA;IAAA;IAAA;EAAA,QAChB;AAEd;AAAC,GAlCQJ,QAAQ;AAAA,KAARA,QAAQ;AAoCjB,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}